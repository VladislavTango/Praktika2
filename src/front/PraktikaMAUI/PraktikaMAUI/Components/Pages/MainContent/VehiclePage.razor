@page "/Home/Vehicles"
@inject IMessageService _message
@inject ModalService _modalService
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@using PraktikaMAUI.Models
@using PraktikaMAUI.Models.VehicleModels
@using System.Text.Json
@using System.Text

<Button Type="primary" style="margin-right:2%" OnClick="@ShowVehicleModal">
    Добавить транспорт
</Button>
<Button Type="primary" style="margin-right:2%" OnClick="@ShowTruckModal">
    Добавить тягач
</Button>
<Button Type="primary" OnClick="@ShowTrailerModal">
    Добавить прицеп
</Button>

<AntList DataSource="@VehicleResponse">
    <Card style="background-color:whitesmoke; width:100%;" Bordered Title=@("Номер Транспорта " + context.Id.ToString())>
        <Body>
            <GridRow>
                <GridCol Flex="4" style="max-width:80%">
                    Номер тягача: @context.Truck.Number || Его марка : @context.Truck.Mark
                    <br />
                    Номер прицепа: @context.Trailer.Number || Тип прицепа:
                    @switch (context.Trailer.TrailerType)
                    {
                        case 0:
                            <span>Стандарт</span>
                            break;
                        case 1:
                            <span>Большой</span>
                            break;
                        case 2:
                            <span>Жидкий</span>
                            break;
                        default:
                            <span>ОШИБКА!!!!</span>
                            break;
                    }
                    <br />
                    Статус транспорта : @context.Status
                </GridCol>
                <GridCol Flex="1">
                    <button style="width:100%" @* @onclick="() => UpdateTransportation(context)" *@ type="button" class="btn btn-warning">Изменить</button>
                </GridCol>
            </GridRow>
        </Body>
    </Card>
</AntList>
<br />
<Pagination PageIndex="@PageIndex" Total="50" OnChange="OnChange"></Pagination>

<Modal Title="@("Добавление прицепа")"
@bind-Visible="@_visibleTrailer"
OnOk="@HandleOk"
OnCancel="@HandleCancel">
    <Form Model="@trailerModel"
    LabelColSpan="8"
    WrapperColSpan="16"
    OnFinish="OnTrailerFinish"
    @ref="@_Trailerform">
        <FormItem Label="Номер прицепа">
            <Input @bind-Value="@trailerModel.Number" Rows="4" />
        </FormItem>

        <FormItem Label="Тип прицепа">
            <Select DataSource="@TrailerTypeList"
            @bind-Value="trailerModel.TrailerType"
            ValueName="Value"
            LabelName="Name"
            Placeholder="Тип груза"
            Style="width:200px"
            AllowClear />
        </FormItem>
    </Form>
</Modal>

<Modal Title="@("Добавление тягача")"
@bind-Visible="@_visibleTruck"
OnOk="@AddTruck"
OnCancel="@HandleCancel">
    <Form Model="@truckModel"
    LabelColSpan="8"
    WrapperColSpan="16"
    OnFinish="OnTruckFinish"
    @ref="@_Truckform">
        <FormItem Label="Номер тягача">
            <Input @bind-Value="@truckModel.Number" Rows="4" />
        </FormItem>

        <FormItem Label="Марка тягача">
            <Input @bind-Value="@truckModel.Mark" Rows="4" />
        </FormItem>
    </Form>
</Modal>

<Modal Title="@("Добавление транспорта")"
@bind-Visible="@_visibleVehicle"
OnOk="@AddVehicle"
OnCancel="@HandleCancel"
Maximizable="@true"
DefaultMaximized="@true" >
    <GridRow>
        <GridCol Flex="3">
            <h3>Прицеп</h3>
            <AntList DataSource="@TrailerGetListResponse">
                <ListItem OnClick="() => SetModelValue(context)">
                    <span>@context.Number</span>
                </ListItem>
            </AntList>
        </GridCol>
        <GridCol Flex="3">
            <h3>Тягач</h3>
            <AntList DataSource="@TruckGetListResponse">
                <ListItem OnClick="() => SetModelValue(context)">
                    <span>@context.Number</span>
                </ListItem>
            </AntList>
        </GridCol>
    </GridRow>
</Modal>

@code {
    private List<VehicleListResponse> VehicleResponse = new List<VehicleListResponse>();
    private List<TrailerGetListResponse> TrailerGetListResponse = new List<TrailerGetListResponse>();
    private List<TruckGetListResponse> TruckGetListResponse = new List<TruckGetListResponse>();

    private Form<TrailerGetListResponse> _Trailerform { get; set; }
    private Form<TruckGetListResponse> _Truckform { get; set; }

    private TrailerGetListResponse trailerModel = new TrailerGetListResponse();
    private TruckGetListResponse truckModel = new TruckGetListResponse();
    private VehicleListResponse vehicleModel = new VehicleListResponse();

    private bool _submittingTrailer = false;
    private bool _visibleTrailer = false;
    private bool _submittingTruck = false;
    private bool _visibleTruck = false;
    private bool _submittingVehicle = false;
    private bool _visibleVehicle = false;

    private List<SelectModels> TrailerTypeList = new List<SelectModels>
        {
            new SelectModels {Value = 0 , Name = "Стандарт"},
            new SelectModels {Value = 1 , Name = "Большой"},
            new SelectModels {Value = 2, Name = "Жидкий"},
        };

    private string token { get; set; }
    private int PageIndex = 1;

    private async Task GetVehicles()
    {
        var url = $"https://localhost:7012/api/Vehicle?PageLength=5&PageNumber={PageIndex}";
        using var httpClient = new HttpClient();



        httpClient.DefaultRequestHeaders.Authorization =
    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();

            VehicleResponse = JsonSerializer.Deserialize<List<VehicleListResponse>>(
               JsonDocument.Parse(responseContent).RootElement.GetProperty("response").GetRawText(),
               new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        else
        {
            string error = await ResponseErrorCatcher.ErrorCatcher(response);
            Error(error);
        }
        StateHasChanged();
    }

    private async Task GetTrucks()
    {
        var url = $"https://localhost:7012/api/Truck?PageLength=5&PageNumber={PageIndex}";
        using var httpClient = new HttpClient();



        httpClient.DefaultRequestHeaders.Authorization =
    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();

            TruckGetListResponse = JsonSerializer.Deserialize<List<TruckGetListResponse>>(
               JsonDocument.Parse(responseContent).RootElement.GetProperty("response").GetRawText(),
               new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        else
        {
            string error = await ResponseErrorCatcher.ErrorCatcher(response);
            Error(error);
        }
        StateHasChanged();
    }

    private async Task GetTrailer()
    {
        var url = $"https://localhost:7012/api/Trailer?PageLength=5&PageNumber={PageIndex}";
        using var httpClient = new HttpClient();



        httpClient.DefaultRequestHeaders.Authorization =
    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();

            TrailerGetListResponse = JsonSerializer.Deserialize<List<TrailerGetListResponse>>(
               JsonDocument.Parse(responseContent).RootElement.GetProperty("response").GetRawText(),
               new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        else
        {
            string error = await ResponseErrorCatcher.ErrorCatcher(response);
            Error(error);
        }
        StateHasChanged();
    }

    protected void OnChange(PaginationEventArgs args)
    {
        PageIndex = args.Page;
        StateHasChanged();
        GetVehicles();
    }

    protected override async Task OnInitializedAsync()
    {
        token = (await _localStorage.GetItemAsStringAsync("Token")).Trim('\"');
        await GetVehicles();
    }

    private async Task ShowTrailerModal() => _visibleTrailer = true;
    private async Task ShowVehicleModal() 
    {
        await GetTrucks();
        await GetTrailer();
        _visibleVehicle = true; 
    }
    private async Task ShowTruckModal() => _visibleTruck = true;

    private async Task Error(string ErrorMessage)
    {
        await _message.Error(ErrorMessage);
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        _submittingTrailer = true;
        if (trailerModel.Number == null)
        {
            Error("не все поля заполненны");
            return;
        }
        var url = "https://localhost:7012/api/Trailer";

        var requestData = new
        {
            number = trailerModel.Number,
            trailerType = trailerModel.TrailerType
        };

        var jsonContent = JsonSerializer.Serialize(requestData);
        var httpContent = new StringContent(jsonContent, Encoding.UTF8, "application/json");

        using var httpClient = new HttpClient();

        httpClient.DefaultRequestHeaders.Authorization =
    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.PostAsync(url, httpContent);

        if (!response.IsSuccessStatusCode)
        {
            string error = await ResponseErrorCatcher.ErrorCatcher(response);
            Error(error);
        }
        _Trailerform.Submit();
    }

    private void OnTruckFinish(EditContext editContext)
    {
        _submittingTruck = false;
        _visibleTruck = false;
        _Truckform.Reset();
    }
    private void OnTrailerFinish(EditContext editContext)
    {
        _submittingTrailer = false;
        _visibleTrailer = false;
        _Trailerform.Reset();
    }
    private void OnVehicleFinish(EditContext editContext)
    {
        _submittingVehicle = false;
        _visibleVehicle = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visibleTrailer = false;
        _visibleVehicle = false;
        _visibleTruck = false;
    }

    private async Task AddTruck(MouseEventArgs e)
    {
        _visibleTruck = true;

        var url = "https://localhost:7012/api/Truck";

        var requestData = new
        {
            number = truckModel.Number,
            mark = truckModel.Mark
        };

        var jsonContent = JsonSerializer.Serialize(requestData);
        var httpContent = new StringContent(jsonContent, Encoding.UTF8, "application/json");

        using var httpClient = new HttpClient();

        httpClient.DefaultRequestHeaders.Authorization =
    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.PostAsync(url, httpContent);

        if (!response.IsSuccessStatusCode)
        {
            string error = await ResponseErrorCatcher.ErrorCatcher(response);
            Error(error);
        }
        _Truckform.Submit();
    }
    private async Task AddVehicle(MouseEventArgs e)
    {
        _visibleVehicle = true;

        var url = "https://localhost:7012/api/Vehicle";

        var requestData = new
        {
            truckNumber = truckModel.Number,
            trailerNumber = trailerModel.Number
        };

        var jsonContent = JsonSerializer.Serialize(requestData);
        var httpContent = new StringContent(jsonContent, Encoding.UTF8, "application/json");

        using var httpClient = new HttpClient();

        httpClient.DefaultRequestHeaders.Authorization =
    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await httpClient.PostAsync(url, httpContent);

        if (!response.IsSuccessStatusCode)
        {
            string error = await ResponseErrorCatcher.ErrorCatcher(response);
            Error(error);
        }
        await GetVehicles();
        _visibleVehicle = false;
        _submittingVehicle = false;
    }
    private async Task SetModelValue<T>(T model) where T : class
    {
        if (model is TrailerGetListResponse trailer)
        {
            trailerModel = trailer;
        }
        else if (model is TruckGetListResponse truck)
        {
            truckModel = truck;
        }
        StateHasChanged();
    }
}
